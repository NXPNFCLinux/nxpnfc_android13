diff -urN empty/frameworks/Android.bp patch/frameworks/Android.bp
--- empty/frameworks/Android.bp	1970-01-01 05:30:00.000000000 +0530
+++ patch/frameworks/Android.bp	2021-06-29 23:34:50.650520168 +0530
@@ -0,0 +1,17 @@
+
+
+//#######################################
+// com.nxp.nfc - library
+//#######################################
+java_library {
+
+    name: "com.nxp.nfc",
+    installable: true,
+    required: ["com.nxp.nfc.xml"],
+
+    srcs: [
+        "com/**/I*.aidl",
+        "com/**/*.java",
+    ],
+
+}
diff -urN empty/frameworks/com/nxp/nfc/INxpNfcAdapter.aidl patch/frameworks/com/nxp/nfc/INxpNfcAdapter.aidl
--- empty/frameworks/com/nxp/nfc/INxpNfcAdapter.aidl	1970-01-01 05:30:00.000000000 +0530
+++ patch/frameworks/com/nxp/nfc/INxpNfcAdapter.aidl	2021-06-29 23:34:50.650520168 +0530
@@ -0,0 +1,25 @@
+ /*
+  * Copyright 2015-2021 NXP
+  *
+  * Licensed under the Apache License, Version 2.0 (the "License");
+  * you may not use this file except in compliance with the License.
+  * You may obtain a copy of the License at
+  *
+  *      http://www.apache.org/licenses/LICENSE-2.0
+  *
+  * Unless required by applicable law or agreed to in writing, software
+  * distributed under the License is distributed on an "AS IS" BASIS,
+  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  * See the License for the specific language governing permissions and
+  * limitations under the License.
+  */
+package com.nxp.nfc;
+
+/**
+ * @hide
+ */
+interface INxpNfcAdapter
+{
+    int doWriteT4tData(in byte[] fileId, in byte[] data, int length);
+    byte[] doReadT4tData(in byte[] fileId);
+}
diff -urN empty/frameworks/com/nxp/nfc/NfcConstants.java patch/frameworks/com/nxp/nfc/NfcConstants.java
--- empty/frameworks/com/nxp/nfc/NfcConstants.java	1970-01-01 05:30:00.000000000 +0530
+++ patch/frameworks/com/nxp/nfc/NfcConstants.java	2021-06-29 23:34:50.650520168 +0530
@@ -0,0 +1,305 @@
+/*
+*
+*  The original Work has been changed by NXP Semiconductors.
+*
+*  Copyright (C) 2013-2020 NXP Semiconductors
+*
+*  Licensed under the Apache License, Version 2.0 (the "License");
+*  you may not use this file except in compliance with the License.
+*  You may obtain a copy of the License at
+*
+*  http://www.apache.org/licenses/LICENSE-2.0
+*
+*  Unless required by applicable law or agreed to in writing, software
+*  distributed under the License is distributed on an "AS IS" BASIS,
+*  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+*  See the License for the specific language governing permissions and
+*  limitations under the License.
+*
+*/
+
+package com.nxp.nfc;
+
+import android.annotation.SdkConstant;
+import android.annotation.SdkConstant.SdkConstantType;
+
+/**
+ * This class provides the constants ID types.
+ */
+
+public final class NfcConstants {
+  /**
+   * UICC ID to be able to select it as the default Secure Element
+   */
+  public static final String UICC_ID = "com.nxp.uicc.ID";
+
+  /**
+   *@hide
+   */
+  public static final int UICC_ID_TYPE = 2;
+
+  /**
+   * UICC2 ID to be able to select it as the default Secure Element
+   */
+  public static final String UICC2_ID = "com.nxp.uicc2.ID";
+
+  /**
+   *@hide
+   */
+  public static final int UICC2_ID_TYPE = 4;
+
+  /**
+   * eSE ID to be able to select it as the default Secure Element
+   */
+  public static final String SMART_MX_ID = "com.nxp.smart_mx.ID";
+
+  /**
+   *@hide
+   */
+  public static final int SMART_MX_ID_TYPE = 1;
+  /**
+   * UICC ID to be able to select it as the default Secure Element
+   */
+
+  /**
+   * ID to be able to select all Secure Elements
+   * @hide
+   */
+  public static final String ALL_SE_ID = "com.nxp.all_se.ID";
+
+  /**
+   *
+   */
+  public static final String HOST_ID = "com.nxp.host.ID";
+
+  /**
+   *@hide
+   */
+  public static final int HOST_ID_TYPE = 0;
+
+  /**
+   * fw version major number
+   * @hide
+   */
+  static final byte PN553_FW_MAJOR_NUM = 1;
+
+  /**
+   * fw ROM code version
+   * @hide
+   */
+  static final byte PN553_FW_ROM_VER = 0x11;
+
+  /**
+   * mpos mode status
+   */
+  public static final int MPOS_STATUS_SUCCESS = 0x00;
+
+  public static final int MPOS_STATUS_BUSY = 0xEB;
+
+  public static final int MPOS_STATUS_REJECTED = 0x01;
+
+  /**
+   * SCR mode status
+   */
+  public static final int SCR_STATUS_SUCCESS = 0x00;
+
+  public static final int SCR_STATUS_BUSY = 0xEB;
+
+  public static final int SCR_STATUS_REJECTED = 0x01;
+
+  public static final int SCR_STATUS_FAILED = 0x03;
+
+  /**
+   * parameter for configuring RF poll
+   */
+  public static final int LOW_POWER = 0x00;
+
+  public static final int ULTRA_LOW_POWER = 0x01;
+
+  /**
+   * Broadcast Action: Multiple card presented to emvco reader.
+   */
+  @SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
+  public static final String ACTION_EMVCO_MULTIPLE_CARD_DETECTED =
+      "com.nxp.action.EMVCO_MULTIPLE_CARD_DETECTED";
+
+  /**
+   * Broadcast Action: a transaction with a secure element has been detected.
+   *
+   * Always contains the extra field
+   * {@link com.nxp.nfc.NfcConstants#EXTRA_AID} and {@link
+   * com.nxp.nfc.NfcConstants#EXTRA_SOURCE}
+   *
+   */
+  @SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
+  public static final String ACTION_TRANSACTION_DETECTED =
+      "com.nxp.action.TRANSACTION_DETECTED";
+
+  /**
+   * Mandatory byte array extra field in
+   * {@link com.nxp.nfc.NfcConstants#ACTION_TRANSACTION_DETECTED}.
+   * <p>
+   * Contains the AID of the applet involved in the transaction.
+   *
+   */
+  public static final String EXTRA_AID = "com.nxp.extra.AID";
+
+  /**
+   * Mandatory byte array extra field in
+   * {@link com.nxp.nfc.NfcConstants#ACTION_TRANSACTION_DETECTED}.
+   * <p>
+   * Contains the extra data of the applet involved in the transaction.
+   *
+   */
+  public static final String EXTRA_DATA = "com.nxp.extra.DATA";
+
+  /**
+   * Broadcast Action: a connectivity event coming from the UICC/ESE
+   * has been detected.
+   * <p>
+   * Always contains the extra field
+   * {@link com.nxp.nfc.NfcConstants#EXTRA_SOURCE}
+   */
+  @SdkConstant(SdkConstantType.BROADCAST_INTENT_ACTION)
+  public static final String ACTION_CONNECTIVITY_EVENT_DETECTED =
+      "com.nxp.action.CONNECTIVITY_EVENT_DETECTED";
+
+  /**
+   * Mandatory string extra field in
+   * {@link com.nxp.nfc.NfcConstants#ACTION_TRANSACTION_DETECTED} and
+   * {@link com.nxp.nfc.NfcConstants#ACTION_CONNECTIVITY_EVENT_DETECTED}.
+   * <p>
+   * Contains the event source (UICC/ESE) of the transaction.
+   *
+   */
+  public static final String EXTRA_SOURCE = "com.nxp.extra.SOURCE";
+
+  /**
+   * Intent received when start reader request from app is successfully
+   * processed.
+   *
+   */
+  @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
+  public static final String ACTION_NFC_MPOS_READER_MODE_START_SUCCESS =
+      "com.nxp.nfc_extras.action.NFC_MPOS_READER_MODE_START_SUCCESS";
+
+  @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
+  public static final String ACTION_NFC_SECURE_READER_MODE_START_SUCCESS =
+      "com.nxp.nfc_extras.action.NFC_SECURE_READER_MODE_START_SUCCESS";
+
+  /**
+   * Intent received when start reader request from app is failed to process.
+   *
+   */
+  @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
+  public static final String ACTION_NFC_MPOS_READER_MODE_START_FAIL =
+      "com.nxp.nfc_extras.action.NFC_MPOS_READER_MODE_START_FAIL";
+
+  @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
+  public static final String ACTION_NFC_SECURE_READER_MODE_START_FAIL =
+      "com.nxp.nfc_extras.action.NFC_SECURE_READER_MODE_START_FAIL";
+
+  /**
+   * Intent received when the Secure Reader needs to restart.
+   *
+   */
+  @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
+  public static final String ACTION_NFC_MPOS_READER_MODE_RESTART =
+      "com.nxp.nfc_extras.action.NFC_MPOS_READER_MODE_RESTART";
+
+  @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
+  public static final String ACTION_NFC_SECURE_READER_MODE_RESTART =
+      "com.nxp.nfc_extras.action.NFC_SECURE_READER_MODE_RESTART";
+
+  /**
+   * Intent received when reader is activated.
+   *
+   */
+  @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
+  public static final String ACTION_NFC_MPOS_READER_MODE_ACTIVATED =
+      "com.nxp.nfc_extras.action.NFC_MPOS_READER_MODE_ACTIVATED";
+
+  @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
+  public static final String ACTION_NFC_SECURE_READER_MODE_TARGET_ACTIVATED =
+      "com.nxp.nfc_extras.action.NFC_SECURE_READER_MODE_TARGET_ACTIVATED";
+
+  /**
+   * Intent received when the Secure Reader is disconnected from card.
+   *
+   */
+  @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
+  public static final String ACTION_NFC_MPOS_READER_MODE_STOP_SUCCESS =
+      "com.nxp.nfc_extras.action.NFC_MPOS_READER_MODE_STOP_SUCCESS";
+
+  @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
+  public static final String ACTION_NFC_SECURE_READER_MODE_STOP_SUCCESS =
+      "com.nxp.nfc_extras.action.NFC_SECURE_READER_MODE_STOP_SUCCESS";
+
+  /**
+   * Intent received when the Secure Reader is disconnected from card.
+   *
+   */
+  @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
+  public static final String ACTION_NFC_MPOS_READER_MODE_STOP_FAIL =
+      "com.nxp.nfc_extras.action.NFC_MPOS_READER_MODE_STOP_FAIL";
+
+  @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
+  public static final String ACTION_NFC_SECURE_READER_MODE_STOP_FAIL =
+      "com.nxp.nfc_extras.action.NFC_SECURE_READER_MODE_STOP_FAIL";
+
+  /**
+   * Intent received when the Secure Reader transcation is done.
+   *
+   */
+  @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
+  public static final String ACTION_NFC_MPOS_READER_MODE_REMOVE_CARD =
+      "com.nxp.nfc_extras.action.NFC_MPOS_READER_MODE_REMOVE_CARD";
+
+  /**
+   * Intent received when the Secure Reader gets timeout.
+   *
+   */
+  @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
+  public static final String ACTION_NFC_MPOS_READER_MODE_TIMEOUT =
+      "com.nxp.nfc_extras.action.NFC_MPOS_READER_MODE_TIMEOUT";
+
+  @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
+  public static final String ACTION_NFC_SECURE_READER_MODE_TIMEOUT =
+      "com.nxp.nfc_extras.action.NFC_SECURE_READER_MODE_TIMEOUT";
+
+  /**
+   * Intent received when multiple cards detected during Secure reader operation.
+   *
+   */
+  @SdkConstant(SdkConstantType.ACTIVITY_INTENT_ACTION)
+  public static final String ACTION_NFC_MPOS_READER_MODE_MULTIPLE_TARGET_DETECTED =
+      "com.nxp.nfc_extras.action.NFC_MPOS_READER_MODE_MULTIPLE_TARGET_DETECTED";
+
+  public static final String ACTION_ROUTING_TABLE_FULL =
+      "nfc.intent.action.AID_ROUTING_TABLE_FULL";
+
+  public static final String PERMISSIONS_NFC = "android.permission.NFC";
+
+  public static final String ACTION_CHECK_X509 =
+      "org.simalliance.openmobileapi.service.ACTION_CHECK_X509";
+  public static final String SET_PACKAGE_NAME =
+      "org.simalliance.openmobileapi.service";
+  public static final String EXTRA_SE_NAME =
+      "org.simalliance.openmobileapi.service.EXTRA_SE_NAME";
+  public static final String EXTRA_PKG =
+      "org.simalliance.openmobileapi.service.extra.EXTRA_PKG";
+  public static final String EXTRA_RESULT =
+      "org.simalliance.openmobileapi.service.extra.EXTRA_RESULT";
+
+  public static final String ACTION_CHECK_X509_RESULT =
+      "org.simalliance.openmobileapi.service.ACTION_CHECK_X509_RESULT";
+
+  /**
+   * Indicates the states of an APDU service.
+   * Service is enabled only when the commit to routing table is successful
+   */
+  public static final int SERVICE_STATE_DISABLED = 0;
+  public static final int SERVICE_STATE_ENABLED = 1;
+  public static final int SERVICE_STATE_ENABLING = 2;
+  public static final int SERVICE_STATE_DISABLING = 3;
+}
diff -urN empty/frameworks/com/nxp/nfc/NxpNfcAdapter.java patch/frameworks/com/nxp/nfc/NxpNfcAdapter.java
--- empty/frameworks/com/nxp/nfc/NxpNfcAdapter.java	1970-01-01 05:30:00.000000000 +0530
+++ patch/frameworks/com/nxp/nfc/NxpNfcAdapter.java	2021-06-29 23:34:50.650520168 +0530
@@ -0,0 +1,182 @@
+/*
+ *
+ *  The original Work has been changed by NXP.
+ *
+ *  Copyright 2013-2021 NXP
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *  http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ *
+ */
+package com.nxp.nfc;
+
+import java.util.HashMap;
+import java.util.Map;
+import android.nfc.INfcAdapter;
+import android.nfc.NfcAdapter;
+import android.os.IBinder;
+import android.os.ServiceManager;
+
+import android.os.RemoteException;
+import android.annotation.RequiresPermission;
+
+import android.util.Log;
+import java.util.List;
+public final class NxpNfcAdapter {
+    private static final String TAG = "NXPNFC";
+    // Guarded by NfcAdapter.class
+    static boolean sIsInitialized = false;
+
+    /**
+     * The NfcAdapter object for each application context.
+     * There is a 1-1 relationship between application context and
+     * NfcAdapter object.
+     */
+    static HashMap<NfcAdapter, NxpNfcAdapter> sNfcAdapters = new HashMap(); //guard by NfcAdapter.class
+
+    // Final after first constructor, except for
+    // attemptDeadServiceRecovery() when NFC crashes - we accept a best effort
+    // recovery
+    private static INfcAdapter sService;
+    private static INxpNfcAdapter sNxpService;
+
+    private NxpNfcAdapter() {
+    }
+    /**
+     * Returns the NxpNfcAdapter for application context,
+     * or throws if NFC is not available.
+     * @hide
+     */
+    public static synchronized NxpNfcAdapter getNxpNfcAdapter(NfcAdapter adapter) {
+        if (!sIsInitialized) {
+            if (adapter == null) {
+                Log.v(TAG, "could not find NFC support");
+                throw new UnsupportedOperationException();
+            }
+            sService = getServiceInterface();
+            if (sService == null) {
+                Log.e(TAG, "could not retrieve NFC service");
+                throw new UnsupportedOperationException();
+            }
+            sNxpService = getNxpNfcAdapterInterface();
+             if (sNxpService == null) {
+                Log.e(TAG, "could not retrieve NXP NFC service");
+                throw new UnsupportedOperationException();
+            }
+            sIsInitialized = true;
+        }
+        NxpNfcAdapter nxpAdapter = sNfcAdapters.get(adapter);
+        if (nxpAdapter == null) {
+            nxpAdapter = new NxpNfcAdapter();
+            sNfcAdapters.put(adapter, nxpAdapter);
+        }
+        return nxpAdapter;
+    }
+
+    /** get handle to NFC service interface */
+    private static INfcAdapter getServiceInterface() {
+        /* get a handle to NFC service */
+        IBinder b = ServiceManager.getService("nfc");
+        if (b == null) {
+            return null;
+        }
+        return INfcAdapter.Stub.asInterface(b);
+    }
+
+    /**
+     * NFC service dead - attempt best effort recovery
+     * @hide
+     */
+    private static void attemptDeadServiceRecovery(Exception e) {
+        Log.e(TAG, "Service dead - attempting to recover",e);
+        INfcAdapter service = getServiceInterface();
+        if (service == null) {
+            Log.e(TAG, "could not retrieve NFC service during service recovery");
+            // nothing more can be done now, sService is still stale, we'll hit
+            // this recovery path again later
+            return;
+        }
+        // assigning to sService is not thread-safe, but this is best-effort code
+        // and on a well-behaved system should never happen
+        sService = service;
+        sNxpService = getNxpNfcAdapterInterface();
+        return;
+    }
+
+   /**
+     * @hide
+     */
+    public static INxpNfcAdapter getNxpNfcAdapterInterface() {
+      if (sService == null) {
+        throw new UnsupportedOperationException(
+            "You need a reference from NfcAdapter to use the "
+            + " NXP NFC APIs");
+      }
+      try {
+        IBinder b = sService.getNfcAdapterVendorInterface("nxp");
+        if (b == null) {
+          return null;
+        }
+        return INxpNfcAdapter.Stub.asInterface(b);
+      } catch (RemoteException e) {
+        return null;
+      }
+    }
+
+    /**
+     * This API performs writes of T4T data to Nfcee.
+     * @param fileId File Id to which to write
+     * @param data data bytes to be written
+     * @param length current data length
+     * @return number of bytes written if success else negative number of
+                error code listed as here .
+                -1  STATUS_FAILED
+                -2  ERROR_RF_ACTIVATED
+                -3  ERROR_MPOS_ON
+                -4  ERROR_NFC_NOT_ON
+                -5  ERROR_INVALID_FILE_ID
+                -6  ERROR_INVALID_LENGTH
+                -7  ERROR_CONNECTION_FAILED
+                -8  ERROR_EMPTY_PAYLOAD
+                -9  ERROR_NDEF_VALIDATION_FAILED
+     * <p>Requires {@link   android.Manifest.permission#NFC} permission.
+     */
+    @RequiresPermission(android.Manifest.permission.NFC)
+    public int doWriteT4tData(byte[] fileId, byte[] data, int length) {
+      try {
+        return sNxpService.doWriteT4tData(fileId, data, length);
+      } catch (RemoteException e) {
+        e.printStackTrace();
+        attemptDeadServiceRecovery(e);
+        return -1;
+      }
+    }
+
+    /**
+     * This API performs reading of T4T content of Nfcee.
+     * @param fileId : File Id from which to read
+     * @return read bytes :-Returns read message if success
+     *                      Returns null if failed to read
+     *                      Returns 0xFF if file is empty.
+     * <p>Requires {@link   android.Manifest.permission#NFC} permission.
+     */
+    @RequiresPermission(android.Manifest.permission.NFC)
+    public byte[] doReadT4tData(byte[] fileId) {
+      try {
+        return sNxpService.doReadT4tData(fileId);
+      } catch (RemoteException e) {
+        e.printStackTrace();
+        attemptDeadServiceRecovery(e);
+        return null;
+      }
+    }
+}
diff -urN empty/frameworks/com.nxp.nfc.xml patch/frameworks/com.nxp.nfc.xml
--- empty/frameworks/com.nxp.nfc.xml	1970-01-01 05:30:00.000000000 +0530
+++ patch/frameworks/com.nxp.nfc.xml	2021-06-29 23:34:50.650520168 +0530
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+Copyright (c) 2015, The Linux Foundation. All rights reserved.
+-->
+
+<!-- Assist library for NXP NFC extensions. -->
+<permissions>
+    <library name="com.nxp.nfc"
+        file="/system/framework/com.nxp.nfc.jar" />
+</permissions>
